-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity upzero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dlt : IN STD_LOGIC_VECTOR (31 downto 0);
    dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce0 : OUT STD_LOGIC;
    dlti_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce1 : OUT STD_LOGIC;
    dlti_we1 : OUT STD_LOGIC;
    dlti_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dlti_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bli_ce0 : OUT STD_LOGIC;
    bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bli_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bli_ce1 : OUT STD_LOGIC;
    bli_we1 : OUT STD_LOGIC;
    bli_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of upzero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_exitcond_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal bli_addr_1_reg_382 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_bli_addr_1_reg_382 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_bli_addr_1_reg_382 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter3_bli_addr_1_reg_382 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_283_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_10_reg_398 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal dlti_addr_3_reg_409 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp1_iter1_exitcond1_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal bli_addr_reg_418 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp1_iter1_bli_addr_reg_418 : STD_LOGIC_VECTOR (2 downto 0);
    signal bli_load_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal dlti_addr_5_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_load_4_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal i_1_phi_fu_176_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd2_cast_cast_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_275_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_10_cast_fu_271_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_7_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_329_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_3_cast_fu_326_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_4_fu_336_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component adpcm_main_mul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    adpcm_main_mul_32bkb_x_U58 : component adpcm_main_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => reg_233,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_fu_254_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_244_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_reg_373 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_244_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and not((exitcond_reg_373 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_244_p2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond1_fu_315_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_244_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond1_fu_315_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_244_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond1_fu_315_p2))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
            end if;
        end if;
    end process;


    i_1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_244_p2))) then 
                i_1_reg_172 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_373 = ap_const_lv1_0))) then 
                i_1_reg_172 <= i_3_reg_206;
            end if; 
        end if;
    end process;

    i_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_244_p2)))) then 
                i_reg_184 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond1_fu_315_p2))) then 
                i_reg_184 <= grp_fu_195_p2(3 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                reg_238 <= dlti_q0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                reg_238 <= dlti_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then
                ap_pipeline_reg_pp0_iter1_bli_addr_1_reg_382 <= bli_addr_1_reg_382;
                ap_pipeline_reg_pp0_iter2_bli_addr_1_reg_382 <= ap_pipeline_reg_pp0_iter1_bli_addr_1_reg_382;
                ap_pipeline_reg_pp0_iter3_bli_addr_1_reg_382 <= ap_pipeline_reg_pp0_iter2_bli_addr_1_reg_382;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_reg_373 <= exitcond_reg_373;
                ap_pipeline_reg_pp0_iter2_exitcond_reg_373 <= ap_pipeline_reg_pp0_iter1_exitcond_reg_373;
                ap_pipeline_reg_pp0_iter3_exitcond_reg_373 <= ap_pipeline_reg_pp0_iter2_exitcond_reg_373;
                ap_pipeline_reg_pp0_iter4_exitcond_reg_373 <= ap_pipeline_reg_pp0_iter3_exitcond_reg_373;
                exitcond_reg_373 <= exitcond_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                ap_pipeline_reg_pp1_iter1_bli_addr_reg_418 <= bli_addr_reg_418;
                ap_pipeline_reg_pp1_iter1_exitcond1_reg_414 <= exitcond1_reg_414;
                exitcond1_reg_414 <= exitcond1_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_373 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then
                bli_addr_1_reg_382 <= tmp_8_fu_260_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond1_fu_315_p2))) then
                bli_addr_reg_418 <= tmp_2_fu_321_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond1_reg_414))) then
                bli_load_reg_424 <= bli_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                dlti_load_4_reg_441 <= dlti_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_3_reg_206 <= grp_fu_195_p2(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_373 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then
                reg_233 <= dlti_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond_reg_373))) then
                tmp_10_reg_398 <= tmp_10_fu_283_p2;
                tmp_s_reg_393 <= grp_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_244_p2))) then
                tmp_1_reg_368 <= tmp_1_fu_250_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, tmp_fu_244_p2, exitcond_fu_254_p2, ap_CS_fsm_pp0_stage1, exitcond1_fu_315_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_244_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_fu_244_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_254_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond1_fu_315_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond1_fu_315_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state16 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state17 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state18 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state19 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state20 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state21 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state22 <= ap_CS_fsm(11 downto 11);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bli_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage1, ap_pipeline_reg_pp0_iter2_bli_addr_1_reg_382, ap_enable_reg_pp0_iter3, tmp_2_fu_321_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            bli_address0 <= tmp_2_fu_321_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            bli_address0 <= ap_pipeline_reg_pp0_iter2_bli_addr_1_reg_382;
        else 
            bli_address0 <= "XXX";
        end if; 
    end process;


    bli_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_pipeline_reg_pp0_iter3_bli_addr_1_reg_382, ap_pipeline_reg_pp1_iter1_bli_addr_reg_418, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp1_iter2)) then 
            bli_address1 <= ap_pipeline_reg_pp1_iter1_bli_addr_reg_418;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            bli_address1 <= ap_pipeline_reg_pp0_iter3_bli_addr_1_reg_382;
        else 
            bli_address1 <= "XXX";
        end if; 
    end process;


    bli_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) then 
            bli_ce0 <= ap_const_logic_1;
        else 
            bli_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bli_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4)) or (ap_const_logic_1 = ap_enable_reg_pp1_iter2))) then 
            bli_ce1 <= ap_const_logic_1;
        else 
            bli_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bli_d1_assign_proc : process(grp_fu_195_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2, tmp_4_fu_336_p2)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp1_iter2)) then 
            bli_d1 <= tmp_4_fu_336_p2(39 downto 8);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            bli_d1 <= grp_fu_195_p2;
        else 
            bli_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bli_we1_assign_proc : process(ap_pipeline_reg_pp0_iter4_exitcond_reg_373, ap_CS_fsm_pp0_stage1, ap_pipeline_reg_pp1_iter1_exitcond1_reg_414, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter4_exitcond_reg_373)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp1_iter1_exitcond1_reg_414)))) then 
            bli_we1 <= ap_const_logic_1;
        else 
            bli_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_addr_3_reg_409 <= ap_const_lv64_3(3 - 1 downto 0);
    dlti_addr_5_reg_436 <= ap_const_lv64_1(3 - 1 downto 0);

    dlti_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state12, tmp_8_fu_260_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            dlti_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            dlti_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            dlti_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            dlti_address0 <= tmp_8_fu_260_p1(3 - 1 downto 0);
        else 
            dlti_address0 <= "XXX";
        end if; 
    end process;


    dlti_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state12, dlti_addr_3_reg_409, dlti_addr_5_reg_436, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            dlti_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            dlti_address1 <= dlti_addr_5_reg_436;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            dlti_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            dlti_address1 <= dlti_addr_3_reg_409;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            dlti_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            dlti_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            dlti_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            dlti_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        else 
            dlti_address1 <= "XXX";
        end if; 
    end process;


    dlti_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state12)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)))) then 
            dlti_ce0 <= ap_const_logic_1;
        else 
            dlti_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dlti_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            dlti_ce1 <= ap_const_logic_1;
        else 
            dlti_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dlti_d1_assign_proc : process(dlt, reg_233, ap_CS_fsm_state17, reg_238, ap_CS_fsm_state18, dlti_load_4_reg_441, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
            dlti_d1 <= dlt;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            dlti_d1 <= dlti_load_4_reg_441;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)))) then 
            dlti_d1 <= reg_238;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)))) then 
            dlti_d1 <= reg_233;
        else 
            dlti_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dlti_we1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)) or ((ap_const_lv1_1 = ap_CS_fsm_state22)))) then 
            dlti_we1 <= ap_const_logic_1;
        else 
            dlti_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_315_p2 <= "1" when (i_reg_184 = ap_const_lv3_6) else "0";
    exitcond_fu_254_p2 <= "1" when (i_1_phi_fu_176_p4 = ap_const_lv3_6) else "0";

    grp_fu_195_p0_assign_proc : process(i_reg_184, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, i_1_phi_fu_176_p4, wd2_cast_cast_fu_296_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            grp_fu_195_p0 <= std_logic_vector(resize(unsigned(i_reg_184),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            grp_fu_195_p0 <= wd2_cast_cast_fu_296_p3;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_195_p0 <= std_logic_vector(resize(unsigned(i_1_phi_fu_176_p4),32));
        else 
            grp_fu_195_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_195_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp0_stage1, tmp_10_reg_398, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            grp_fu_195_p1 <= tmp_10_reg_398(39 downto 8);
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            grp_fu_195_p1 <= std_logic_vector(resize(unsigned(ap_const_lv3_1),32));
        else 
            grp_fu_195_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_195_p2 <= std_logic_vector(unsigned(grp_fu_195_p0) + unsigned(grp_fu_195_p1));
    grp_fu_222_p0 <= tmp_1_reg_368(32 - 1 downto 0);

    i_1_phi_fu_176_p4_assign_proc : process(i_1_reg_172, i_3_reg_206, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_373)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_373 = ap_const_lv1_0))) then 
            i_1_phi_fu_176_p4 <= i_3_reg_206;
        else 
            i_1_phi_fu_176_p4 <= i_1_reg_172;
        end if; 
    end process;

    p_shl1_fu_275_p3 <= (bli_q0 & ap_const_lv8_0);
    p_shl_fu_329_p3 <= (bli_load_reg_424 & ap_const_lv8_0);
        tmp_10_cast_fu_271_p1 <= std_logic_vector(resize(signed(bli_q0),40));

    tmp_10_fu_283_p2 <= std_logic_vector(unsigned(p_shl1_fu_275_p3) - unsigned(tmp_10_cast_fu_271_p1));
        tmp_1_fu_250_p1 <= std_logic_vector(resize(signed(dlt),64));

    tmp_2_fu_321_p1 <= std_logic_vector(resize(unsigned(i_reg_184),64));
        tmp_3_cast_fu_326_p1 <= std_logic_vector(resize(signed(bli_load_reg_424),40));

    tmp_4_fu_336_p2 <= std_logic_vector(unsigned(p_shl_fu_329_p3) - unsigned(tmp_3_cast_fu_326_p1));
    tmp_7_fu_289_p3 <= tmp_s_reg_393(63 downto 63);
    tmp_8_fu_260_p1 <= std_logic_vector(resize(unsigned(i_1_reg_172),64));
    tmp_fu_244_p2 <= "1" when (dlt = ap_const_lv32_0) else "0";
    wd2_cast_cast_fu_296_p3 <= 
        ap_const_lv32_FFFFFF80 when (tmp_7_fu_289_p3(0) = '1') else 
        ap_const_lv32_80;
end behav;
