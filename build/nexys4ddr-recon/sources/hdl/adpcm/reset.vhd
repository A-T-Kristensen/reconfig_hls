-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reset is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dec_detl : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_detl_ap_vld : OUT STD_LOGIC;
    detl : OUT STD_LOGIC_VECTOR (31 downto 0);
    detl_ap_vld : OUT STD_LOGIC;
    dec_deth : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_deth_ap_vld : OUT STD_LOGIC;
    deth : OUT STD_LOGIC_VECTOR (31 downto 0);
    deth_ap_vld : OUT STD_LOGIC;
    rlt2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rlt2_ap_vld : OUT STD_LOGIC;
    rlt1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rlt1_ap_vld : OUT STD_LOGIC;
    plt2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt2_ap_vld : OUT STD_LOGIC;
    plt1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt1_ap_vld : OUT STD_LOGIC;
    al2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    al2_ap_vld : OUT STD_LOGIC;
    al1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    al1_ap_vld : OUT STD_LOGIC;
    nbl : OUT STD_LOGIC_VECTOR (31 downto 0);
    nbl_ap_vld : OUT STD_LOGIC;
    rh2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rh2_ap_vld : OUT STD_LOGIC;
    rh1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rh1_ap_vld : OUT STD_LOGIC;
    ph2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph2_ap_vld : OUT STD_LOGIC;
    ph1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph1_ap_vld : OUT STD_LOGIC;
    ah2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ah2_ap_vld : OUT STD_LOGIC;
    ah1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ah1_ap_vld : OUT STD_LOGIC;
    nbh : OUT STD_LOGIC_VECTOR (31 downto 0);
    nbh_ap_vld : OUT STD_LOGIC;
    dec_rlt2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_rlt2_ap_vld : OUT STD_LOGIC;
    dec_rlt1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_rlt1_ap_vld : OUT STD_LOGIC;
    dec_plt2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_ap_vld : OUT STD_LOGIC;
    dec_plt1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_ap_vld : OUT STD_LOGIC;
    dec_al2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_al2_ap_vld : OUT STD_LOGIC;
    dec_al1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_al1_ap_vld : OUT STD_LOGIC;
    dec_nbl : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_nbl_ap_vld : OUT STD_LOGIC;
    dec_rh2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_rh2_ap_vld : OUT STD_LOGIC;
    dec_rh1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_rh1_ap_vld : OUT STD_LOGIC;
    dec_ph2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_ap_vld : OUT STD_LOGIC;
    dec_ph1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_ap_vld : OUT STD_LOGIC;
    dec_ah2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ah2_ap_vld : OUT STD_LOGIC;
    dec_ah1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ah1_ap_vld : OUT STD_LOGIC;
    dec_nbh : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_nbh_ap_vld : OUT STD_LOGIC;
    delay_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce1 : OUT STD_LOGIC;
    delay_dltx_we1 : OUT STD_LOGIC;
    delay_dltx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce1 : OUT STD_LOGIC;
    delay_dhx_we1 : OUT STD_LOGIC;
    delay_dhx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce1 : OUT STD_LOGIC;
    dec_del_dltx_we1 : OUT STD_LOGIC;
    dec_del_dltx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce1 : OUT STD_LOGIC;
    dec_del_dhx_we1 : OUT STD_LOGIC;
    dec_del_dhx_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bpl_ce1 : OUT STD_LOGIC;
    delay_bpl_we1 : OUT STD_LOGIC;
    delay_bpl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bph_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bph_ce1 : OUT STD_LOGIC;
    delay_bph_we1 : OUT STD_LOGIC;
    delay_bph_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bpl_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bpl_ce1 : OUT STD_LOGIC;
    dec_del_bpl_we1 : OUT STD_LOGIC;
    dec_del_bpl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bph_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bph_ce1 : OUT STD_LOGIC;
    dec_del_bph_we1 : OUT STD_LOGIC;
    dec_del_bph_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce1 : OUT STD_LOGIC;
    tqmf_we1 : OUT STD_LOGIC;
    tqmf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumc_ce0 : OUT STD_LOGIC;
    accumc_we0 : OUT STD_LOGIC;
    accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumd_ce0 : OUT STD_LOGIC;
    accumd_we0 : OUT STD_LOGIC;
    accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of reset is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_4_fu_542_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_5_fu_562_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_6_fu_582_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_7_fu_599_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_300 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond3_fu_536_p2 = ap_const_lv1_0)))) then 
                i_1_reg_311 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_556_p2))) then 
                i_1_reg_311 <= i_5_fu_562_p2;
            end if; 
        end if;
    end process;

    i_2_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond2_fu_556_p2)))) then 
                i_2_reg_322 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_576_p2))) then 
                i_2_reg_322 <= i_6_fu_582_p2;
            end if; 
        end if;
    end process;

    i_3_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond1_fu_576_p2)))) then 
                i_3_reg_333 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_593_p2))) then 
                i_3_reg_333 <= i_7_fu_599_p2;
            end if; 
        end if;
    end process;

    i_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_536_p2 = ap_const_lv1_0))) then 
                i_reg_300 <= i_4_fu_542_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_300 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_536_p2, exitcond2_fu_556_p2, exitcond1_fu_576_p2, exitcond_fu_593_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond3_fu_536_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_556_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_576_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond_fu_593_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    accumc_address0 <= tmp_31_fu_605_p1(4 - 1 downto 0);

    accumc_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            accumc_ce0 <= ap_const_logic_1;
        else 
            accumc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    accumc_d0 <= ap_const_lv32_0;

    accumc_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_593_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_593_p2)))) then 
            accumc_we0 <= ap_const_logic_1;
        else 
            accumc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    accumd_address0 <= tmp_31_fu_605_p1(4 - 1 downto 0);

    accumd_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            accumd_ce0 <= ap_const_logic_1;
        else 
            accumd_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    accumd_d0 <= ap_const_lv32_0;

    accumd_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_593_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_593_p2)))) then 
            accumd_we0 <= ap_const_logic_1;
        else 
            accumd_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ah1 <= ap_const_lv32_0;

    ah1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ah1_ap_vld <= ap_const_logic_1;
        else 
            ah1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ah2 <= ap_const_lv32_0;

    ah2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ah2_ap_vld <= ap_const_logic_1;
        else 
            ah2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    al1 <= ap_const_lv32_0;

    al1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            al1_ap_vld <= ap_const_logic_1;
        else 
            al1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    al2 <= ap_const_lv32_0;

    al2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            al2_ap_vld <= ap_const_logic_1;
        else 
            al2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond_fu_593_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_593_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_593_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_593_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dec_ah1 <= ap_const_lv32_0;

    dec_ah1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_ah1_ap_vld <= ap_const_logic_1;
        else 
            dec_ah1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_ah2 <= ap_const_lv32_0;

    dec_ah2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_ah2_ap_vld <= ap_const_logic_1;
        else 
            dec_ah2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_al1 <= ap_const_lv32_0;

    dec_al1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_al1_ap_vld <= ap_const_logic_1;
        else 
            dec_al1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_al2 <= ap_const_lv32_0;

    dec_al2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_al2_ap_vld <= ap_const_logic_1;
        else 
            dec_al2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bph_address1 <= tmp_s_fu_568_p1(3 - 1 downto 0);

    dec_del_bph_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            dec_del_bph_ce1 <= ap_const_logic_1;
        else 
            dec_del_bph_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bph_d1 <= ap_const_lv32_0;

    dec_del_bph_we1_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_556_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_556_p2)))) then 
            dec_del_bph_we1 <= ap_const_logic_1;
        else 
            dec_del_bph_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bpl_address1 <= tmp_s_fu_568_p1(3 - 1 downto 0);

    dec_del_bpl_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            dec_del_bpl_ce1 <= ap_const_logic_1;
        else 
            dec_del_bpl_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bpl_d1 <= ap_const_lv32_0;

    dec_del_bpl_we1_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_556_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_556_p2)))) then 
            dec_del_bpl_we1 <= ap_const_logic_1;
        else 
            dec_del_bpl_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dhx_address1 <= tmp_fu_548_p1(3 - 1 downto 0);

    dec_del_dhx_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            dec_del_dhx_ce1 <= ap_const_logic_1;
        else 
            dec_del_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dhx_d1 <= ap_const_lv32_0;

    dec_del_dhx_we1_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_536_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_536_p2 = ap_const_lv1_0)))) then 
            dec_del_dhx_we1 <= ap_const_logic_1;
        else 
            dec_del_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dltx_address1 <= tmp_fu_548_p1(3 - 1 downto 0);

    dec_del_dltx_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            dec_del_dltx_ce1 <= ap_const_logic_1;
        else 
            dec_del_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dltx_d1 <= ap_const_lv32_0;

    dec_del_dltx_we1_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_536_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_536_p2 = ap_const_lv1_0)))) then 
            dec_del_dltx_we1 <= ap_const_logic_1;
        else 
            dec_del_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_deth <= ap_const_lv32_8;

    dec_deth_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_deth_ap_vld <= ap_const_logic_1;
        else 
            dec_deth_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_detl <= ap_const_lv32_20;

    dec_detl_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_detl_ap_vld <= ap_const_logic_1;
        else 
            dec_detl_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_nbh <= ap_const_lv32_0;

    dec_nbh_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_nbh_ap_vld <= ap_const_logic_1;
        else 
            dec_nbh_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_nbl <= ap_const_lv32_0;

    dec_nbl_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_nbl_ap_vld <= ap_const_logic_1;
        else 
            dec_nbl_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_ph1 <= ap_const_lv32_0;

    dec_ph1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_ph1_ap_vld <= ap_const_logic_1;
        else 
            dec_ph1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_ph2 <= ap_const_lv32_0;

    dec_ph2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_ph2_ap_vld <= ap_const_logic_1;
        else 
            dec_ph2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_plt1 <= ap_const_lv32_0;

    dec_plt1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_plt1_ap_vld <= ap_const_logic_1;
        else 
            dec_plt1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_plt2 <= ap_const_lv32_0;

    dec_plt2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_plt2_ap_vld <= ap_const_logic_1;
        else 
            dec_plt2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_rh1 <= ap_const_lv32_0;

    dec_rh1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_rh1_ap_vld <= ap_const_logic_1;
        else 
            dec_rh1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_rh2 <= ap_const_lv32_0;

    dec_rh2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_rh2_ap_vld <= ap_const_logic_1;
        else 
            dec_rh2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_rlt1 <= ap_const_lv32_0;

    dec_rlt1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_rlt1_ap_vld <= ap_const_logic_1;
        else 
            dec_rlt1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dec_rlt2 <= ap_const_lv32_0;

    dec_rlt2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            dec_rlt2_ap_vld <= ap_const_logic_1;
        else 
            dec_rlt2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    delay_bph_address1 <= tmp_s_fu_568_p1(3 - 1 downto 0);

    delay_bph_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            delay_bph_ce1 <= ap_const_logic_1;
        else 
            delay_bph_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bph_d1 <= ap_const_lv32_0;

    delay_bph_we1_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_556_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_556_p2)))) then 
            delay_bph_we1 <= ap_const_logic_1;
        else 
            delay_bph_we1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bpl_address1 <= tmp_s_fu_568_p1(3 - 1 downto 0);

    delay_bpl_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            delay_bpl_ce1 <= ap_const_logic_1;
        else 
            delay_bpl_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bpl_d1 <= ap_const_lv32_0;

    delay_bpl_we1_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_556_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_556_p2)))) then 
            delay_bpl_we1 <= ap_const_logic_1;
        else 
            delay_bpl_we1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dhx_address1 <= tmp_fu_548_p1(3 - 1 downto 0);

    delay_dhx_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            delay_dhx_ce1 <= ap_const_logic_1;
        else 
            delay_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dhx_d1 <= ap_const_lv32_0;

    delay_dhx_we1_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_536_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_536_p2 = ap_const_lv1_0)))) then 
            delay_dhx_we1 <= ap_const_logic_1;
        else 
            delay_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dltx_address1 <= tmp_fu_548_p1(3 - 1 downto 0);

    delay_dltx_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            delay_dltx_ce1 <= ap_const_logic_1;
        else 
            delay_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dltx_d1 <= ap_const_lv32_0;

    delay_dltx_we1_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_536_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond3_fu_536_p2 = ap_const_lv1_0)))) then 
            delay_dltx_we1 <= ap_const_logic_1;
        else 
            delay_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    deth <= ap_const_lv32_8;

    deth_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            deth_ap_vld <= ap_const_logic_1;
        else 
            deth_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    detl <= ap_const_lv32_20;

    detl_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            detl_ap_vld <= ap_const_logic_1;
        else 
            detl_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_576_p2 <= "1" when (i_2_reg_322 = ap_const_lv5_18) else "0";
    exitcond2_fu_556_p2 <= "1" when (i_1_reg_311 = ap_const_lv3_6) else "0";
    exitcond3_fu_536_p2 <= "1" when (i_reg_300 = ap_const_lv3_6) else "0";
    exitcond_fu_593_p2 <= "1" when (i_3_reg_333 = ap_const_lv4_B) else "0";
    i_4_fu_542_p2 <= std_logic_vector(unsigned(i_reg_300) + unsigned(ap_const_lv3_1));
    i_5_fu_562_p2 <= std_logic_vector(unsigned(i_1_reg_311) + unsigned(ap_const_lv3_1));
    i_6_fu_582_p2 <= std_logic_vector(unsigned(i_2_reg_322) + unsigned(ap_const_lv5_1));
    i_7_fu_599_p2 <= std_logic_vector(unsigned(i_3_reg_333) + unsigned(ap_const_lv4_1));
    nbh <= ap_const_lv32_0;

    nbh_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            nbh_ap_vld <= ap_const_logic_1;
        else 
            nbh_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    nbl <= ap_const_lv32_0;

    nbl_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            nbl_ap_vld <= ap_const_logic_1;
        else 
            nbl_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ph1 <= ap_const_lv32_0;

    ph1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ph1_ap_vld <= ap_const_logic_1;
        else 
            ph1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ph2 <= ap_const_lv32_0;

    ph2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ph2_ap_vld <= ap_const_logic_1;
        else 
            ph2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    plt1 <= ap_const_lv32_0;

    plt1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            plt1_ap_vld <= ap_const_logic_1;
        else 
            plt1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    plt2 <= ap_const_lv32_0;

    plt2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            plt2_ap_vld <= ap_const_logic_1;
        else 
            plt2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rh1 <= ap_const_lv32_0;

    rh1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            rh1_ap_vld <= ap_const_logic_1;
        else 
            rh1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rh2 <= ap_const_lv32_0;

    rh2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            rh2_ap_vld <= ap_const_logic_1;
        else 
            rh2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rlt1 <= ap_const_lv32_0;

    rlt1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            rlt1_ap_vld <= ap_const_logic_1;
        else 
            rlt1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    rlt2 <= ap_const_lv32_0;

    rlt2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            rlt2_ap_vld <= ap_const_logic_1;
        else 
            rlt2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_30_fu_588_p1 <= std_logic_vector(resize(unsigned(i_2_reg_322),64));
    tmp_31_fu_605_p1 <= std_logic_vector(resize(unsigned(i_3_reg_333),64));
    tmp_fu_548_p1 <= std_logic_vector(resize(unsigned(i_reg_300),64));
    tmp_s_fu_568_p1 <= std_logic_vector(resize(unsigned(i_1_reg_311),64));
    tqmf_address1 <= tmp_30_fu_588_p1(5 - 1 downto 0);

    tqmf_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            tqmf_ce1 <= ap_const_logic_1;
        else 
            tqmf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tqmf_d1 <= ap_const_lv32_0;

    tqmf_we1_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_576_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_576_p2)))) then 
            tqmf_we1 <= ap_const_logic_1;
        else 
            tqmf_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
