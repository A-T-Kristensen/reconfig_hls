-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_EN_A : OUT STD_LOGIC;
    a_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_Clk_A : OUT STD_LOGIC;
    a_Rst_A : OUT STD_LOGIC;
    b_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_EN_A : OUT STD_LOGIC;
    b_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_Clk_A : OUT STD_LOGIC;
    b_Rst_A : OUT STD_LOGIC;
    c_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_EN_A : OUT STD_LOGIC;
    c_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    c_Clk_A : OUT STD_LOGIC;
    c_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.680000,HLS_SYN_LAT=4106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=929,HLS_SYN_LUT=927}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv59_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv59_3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv59_4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv59_5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv59_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv9_E : STD_LOGIC_VECTOR (8 downto 0) := "000001110";
    constant ap_const_lv59_7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_406 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_417 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_595_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_reg_1055 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_mid2_fu_613_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_1060 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_fu_621_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_reg_1077 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_629_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_1082 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_cast4_cast_fu_711_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast4_cast_reg_1137 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_761_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_reg_1162 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast4_fu_807_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_cast4_reg_1187 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_12_reg_1258 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_load_12_reg_1263 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_load_13_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_load_13_reg_1283 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1013_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_reg_1298 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_load_14_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_load_14_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_1031_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_1318 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_load_15_reg_1323 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_load_15_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_s_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_s_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_phi_fu_410_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_phi_fu_421_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_phi_fu_432_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_652_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_680_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_689_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_702_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_730_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_739_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_752_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_776_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_785_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_798_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_826_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_835_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_848_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_872_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_881_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_894_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_918_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_927_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_940_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_962_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_971_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_987_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_601_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_cast_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_664_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_675_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_697_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_714_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_725_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_747_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_771_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_793_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_810_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_821_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_843_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_867_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_fu_889_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_903_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_913_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_935_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_cast7_fu_949_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_957_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_fu_982_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_cast5_fu_999_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_fu_1002_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_fu_979_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_cast6_fu_996_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component matmul_hw_mul_32sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmul_hw_mul_32sbkb_U1 : component matmul_hw_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_439_p0,
        din1 => grp_fu_439_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_589_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage15) and not((exitcond_flatten_reg_1051 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_417 <= tmp_mid2_v_reg_1077;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_417 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_406 <= indvar_flatten_next_reg_1055;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_406 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_428 <= j_1_reg_1318;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_428 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13))) then
                a_load_12_reg_1258 <= a_Dout_A;
                b_load_12_reg_1263 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14))) then
                a_load_13_reg_1278 <= a_Dout_A;
                b_load_13_reg_1283 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15))) then
                a_load_14_reg_1303 <= a_Dout_A;
                b_load_14_reg_1308 <= b_Dout_A;
                j_1_reg_1318 <= j_1_fu_1031_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                a_load_15_reg_1323 <= a_Dout_A;
                b_load_15_reg_1328 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051 <= exitcond_flatten_reg_1051;
                exitcond_flatten_reg_1051 <= exitcond_flatten_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_1055 <= indvar_flatten_next_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_589_p2))) then
                j_mid2_reg_1060 <= j_mid2_fu_613_p3;
                    tmp_reg_1082(8 downto 4) <= tmp_fu_629_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)))) then
                reg_495 <= a_Dout_A;
                reg_500 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_505 <= a_Dout_A;
                reg_510 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)))) then
                reg_515 <= a_Dout_A;
                reg_520 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)))) then
                reg_525 <= a_Dout_A;
                reg_530 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)))) then
                reg_535 <= a_Dout_A;
                reg_540 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)))) then
                reg_545 <= a_Dout_A;
                reg_550 <= b_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) then
                reg_555 <= grp_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14)) or ((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage6) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) then
                reg_559 <= grp_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) then
                reg_575 <= grp_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) then
                reg_585 <= grp_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15))) then
                tmp1_reg_1313 <= tmp1_fu_1025_p2;
                tmp_48_reg_1298 <= tmp_48_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage7) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051))) then
                tmp_1_s_reg_1333 <= tmp_1_s_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                    tmp_2_cast4_cast_reg_1137(4 downto 0) <= tmp_2_cast4_cast_fu_711_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7))) then
                    tmp_2_cast4_reg_1187(4 downto 0) <= tmp_2_cast4_fu_807_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_38_reg_1162 <= tmp_38_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_589_p2))) then
                tmp_mid2_v_reg_1077 <= tmp_mid2_v_fu_621_p3;
            end if;
        end if;
    end process;
    tmp_reg_1082(3 downto 0) <= "0000";
    tmp_2_cast4_cast_reg_1137(6 downto 5) <= "00";
    tmp_2_cast4_reg_1187(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_589_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_589_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
            when ap_ST_fsm_pp0_stage4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
            when ap_ST_fsm_pp0_stage5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
            when ap_ST_fsm_pp0_stage6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
            when ap_ST_fsm_pp0_stage7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
            when ap_ST_fsm_pp0_stage8 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
            when ap_ST_fsm_pp0_stage10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
            when ap_ST_fsm_pp0_stage11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
            when ap_ST_fsm_pp0_stage12 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
            when ap_ST_fsm_pp0_stage13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
            when ap_ST_fsm_pp0_stage14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
            when ap_ST_fsm_pp0_stage15 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_Addr_A <= std_logic_vector(shift_left(unsigned(a_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0, tmp_3_fu_637_p1, tmp_5_fu_652_p3, tmp_8_fu_680_p3, tmp_s_fu_702_p3, tmp_11_fu_730_p3, tmp_13_fu_752_p3, tmp_15_fu_776_p3, tmp_17_fu_798_p3, tmp_19_fu_826_p3, tmp_21_fu_848_p3, tmp_23_fu_872_p3, tmp_25_fu_894_p3, tmp_27_fu_918_p3, tmp_29_fu_940_p3, tmp_31_fu_962_p3, tmp_33_fu_987_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage15)) then 
                a_Addr_A_orig <= tmp_33_fu_987_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage14)) then 
                a_Addr_A_orig <= tmp_31_fu_962_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)) then 
                a_Addr_A_orig <= tmp_29_fu_940_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) then 
                a_Addr_A_orig <= tmp_27_fu_918_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) then 
                a_Addr_A_orig <= tmp_25_fu_894_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)) then 
                a_Addr_A_orig <= tmp_23_fu_872_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) then 
                a_Addr_A_orig <= tmp_21_fu_848_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)) then 
                a_Addr_A_orig <= tmp_19_fu_826_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) then 
                a_Addr_A_orig <= tmp_17_fu_798_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) then 
                a_Addr_A_orig <= tmp_15_fu_776_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                a_Addr_A_orig <= tmp_13_fu_752_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                a_Addr_A_orig <= tmp_11_fu_730_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_Addr_A_orig <= tmp_s_fu_702_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_Addr_A_orig <= tmp_8_fu_680_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_Addr_A_orig <= tmp_5_fu_652_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_Addr_A_orig <= tmp_3_fu_637_p1(32 - 1 downto 0);
            else 
                a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_Clk_A <= ap_clk;
    a_Din_A <= ap_const_lv32_0;

    a_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            a_EN_A <= ap_const_logic_1;
        else 
            a_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_Rst_A <= ap_rst;
    a_WEN_A <= ap_const_lv4_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state27 <= ap_CS_fsm(17 downto 17);

    ap_done_assign_proc : process(ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_Addr_A <= std_logic_vector(shift_left(unsigned(b_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0, tmp_2_fu_642_p1, tmp_35_cast_fu_670_p1, tmp_35_fu_689_p3, tmp_37_cast_fu_720_p1, tmp_37_fu_739_p3, tmp_39_cast_fu_766_p1, tmp_39_fu_785_p3, tmp_41_cast_fu_816_p1, tmp_41_fu_835_p3, tmp_43_cast_fu_862_p1, tmp_43_fu_881_p3, tmp_45_cast_fu_908_p1, tmp_45_fu_927_p3, tmp_47_cast_fu_952_p1, tmp_46_fu_971_p3, tmp_49_cast_fu_1008_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage15)) then 
                b_Addr_A_orig <= tmp_49_cast_fu_1008_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage14)) then 
                b_Addr_A_orig <= tmp_46_fu_971_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)) then 
                b_Addr_A_orig <= tmp_47_cast_fu_952_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) then 
                b_Addr_A_orig <= tmp_45_fu_927_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) then 
                b_Addr_A_orig <= tmp_45_cast_fu_908_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)) then 
                b_Addr_A_orig <= tmp_43_fu_881_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) then 
                b_Addr_A_orig <= tmp_43_cast_fu_862_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)) then 
                b_Addr_A_orig <= tmp_41_fu_835_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) then 
                b_Addr_A_orig <= tmp_41_cast_fu_816_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) then 
                b_Addr_A_orig <= tmp_39_fu_785_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) then 
                b_Addr_A_orig <= tmp_39_cast_fu_766_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) then 
                b_Addr_A_orig <= tmp_37_fu_739_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_Addr_A_orig <= tmp_37_cast_fu_720_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_Addr_A_orig <= tmp_35_fu_689_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_Addr_A_orig <= tmp_35_cast_fu_670_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_Addr_A_orig <= tmp_2_fu_642_p1(32 - 1 downto 0);
            else 
                b_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_Clk_A <= ap_clk;
    b_Din_A <= ap_const_lv32_0;

    b_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            b_EN_A <= ap_const_logic_1;
        else 
            b_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_Rst_A <= ap_rst;
    b_WEN_A <= ap_const_lv4_0;
    c_Addr_A <= std_logic_vector(shift_left(unsigned(c_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    c_Addr_A_orig <= tmp_50_cast_fu_1047_p1(32 - 1 downto 0);
    c_Clk_A <= ap_clk;
    c_Din_A <= tmp_1_s_reg_1333;

    c_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            c_EN_A <= ap_const_logic_1;
        else 
            c_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    c_Rst_A <= ap_rst;

    c_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter1, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_1051)))) then 
            c_WEN_A <= ap_const_lv4_F;
        else 
            c_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond_flatten_fu_589_p2 <= "1" when (indvar_flatten_phi_fu_410_p4 = ap_const_lv9_100) else "0";
    exitcond_fu_607_p2 <= "1" when (j_phi_fu_432_p4 = ap_const_lv5_10) else "0";

    grp_fu_439_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, reg_500, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, reg_510, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, reg_520, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage10, reg_530, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage11, reg_540, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, reg_550, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0, b_load_12_reg_1263, b_load_13_reg_1283, b_load_14_reg_1308, b_load_15_reg_1328)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            grp_fu_439_p0 <= b_load_15_reg_1328;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_439_p0 <= b_load_14_reg_1308;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_439_p0 <= b_load_13_reg_1283;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_439_p0 <= b_load_12_reg_1263;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)))) then 
            grp_fu_439_p0 <= reg_550;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_439_p0 <= reg_540;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)))) then 
            grp_fu_439_p0 <= reg_530;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_439_p0 <= reg_520;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)))) then 
            grp_fu_439_p0 <= reg_510;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)))) then 
            grp_fu_439_p0 <= reg_500;
        else 
            grp_fu_439_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_439_p1_assign_proc : process(reg_495, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, reg_505, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage8, reg_515, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, reg_525, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage10, reg_535, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage11, reg_545, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage15, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage0, a_load_12_reg_1258, a_load_13_reg_1278, a_load_14_reg_1303, a_load_15_reg_1323)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            grp_fu_439_p1 <= a_load_15_reg_1323;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_439_p1 <= a_load_14_reg_1303;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_439_p1 <= a_load_13_reg_1278;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_439_p1 <= a_load_12_reg_1258;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage13)))) then 
            grp_fu_439_p1 <= reg_545;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_439_p1 <= reg_535;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage11)))) then 
            grp_fu_439_p1 <= reg_525;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_439_p1 <= reg_515;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage9)))) then 
            grp_fu_439_p1 <= reg_505;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage8)))) then 
            grp_fu_439_p1 <= reg_495;
        else 
            grp_fu_439_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_563_p2 <= std_logic_vector(unsigned(reg_559) + unsigned(reg_555));
    grp_fu_569_p2 <= std_logic_vector(unsigned(reg_559) + unsigned(reg_555));
    grp_fu_579_p2 <= std_logic_vector(unsigned(reg_575) + unsigned(grp_fu_569_p2));
    i_1_fu_601_p2 <= std_logic_vector(unsigned(i_phi_fu_421_p4) + unsigned(ap_const_lv5_1));

    i_phi_fu_421_p4_assign_proc : process(i_reg_417, exitcond_flatten_reg_1051, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_1077)
    begin
        if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            i_phi_fu_421_p4 <= tmp_mid2_v_reg_1077;
        else 
            i_phi_fu_421_p4 <= i_reg_417;
        end if; 
    end process;

    indvar_flatten_next_fu_595_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_410_p4) + unsigned(ap_const_lv9_1));

    indvar_flatten_phi_fu_410_p4_assign_proc : process(indvar_flatten_reg_406, exitcond_flatten_reg_1051, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1055)
    begin
        if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            indvar_flatten_phi_fu_410_p4 <= indvar_flatten_next_reg_1055;
        else 
            indvar_flatten_phi_fu_410_p4 <= indvar_flatten_reg_406;
        end if; 
    end process;

    j_1_fu_1031_p2 <= std_logic_vector(unsigned(j_mid2_reg_1060) + unsigned(ap_const_lv5_1));
    j_mid2_fu_613_p3 <= 
        ap_const_lv5_0 when (exitcond_fu_607_p2(0) = '1') else 
        j_phi_fu_432_p4;

    j_phi_fu_432_p4_assign_proc : process(j_reg_428, exitcond_flatten_reg_1051, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, j_1_reg_1318)
    begin
        if (((exitcond_flatten_reg_1051 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            j_phi_fu_432_p4 <= j_1_reg_1318;
        else 
            j_phi_fu_432_p4 <= j_reg_428;
        end if; 
    end process;

    tmp1_fu_1025_p2 <= std_logic_vector(unsigned(reg_585) + unsigned(tmp5_fu_1019_p2));
    tmp5_fu_1019_p2 <= std_logic_vector(unsigned(reg_575) + unsigned(grp_fu_563_p2));
    tmp8_fu_1036_p2 <= std_logic_vector(unsigned(reg_585) + unsigned(grp_fu_579_p2));
    tmp_10_fu_725_p2 <= (tmp_reg_1082 or ap_const_lv9_4);
    tmp_11_fu_730_p3 <= (ap_const_lv55_0 & tmp_10_fu_725_p2);
    tmp_12_fu_747_p2 <= (tmp_reg_1082 or ap_const_lv9_5);
    tmp_13_fu_752_p3 <= (ap_const_lv55_0 & tmp_12_fu_747_p2);
    tmp_14_fu_771_p2 <= (tmp_reg_1082 or ap_const_lv9_6);
    tmp_15_fu_776_p3 <= (ap_const_lv55_0 & tmp_14_fu_771_p2);
    tmp_16_fu_793_p2 <= (tmp_reg_1082 or ap_const_lv9_7);
    tmp_17_fu_798_p3 <= (ap_const_lv55_0 & tmp_16_fu_793_p2);
    tmp_18_fu_821_p2 <= (tmp_reg_1082 or ap_const_lv9_8);
    tmp_19_fu_826_p3 <= (ap_const_lv55_0 & tmp_18_fu_821_p2);
    tmp_1_s_fu_1042_p2 <= std_logic_vector(unsigned(tmp1_reg_1313) + unsigned(tmp8_fu_1036_p2));
    tmp_20_fu_843_p2 <= (tmp_reg_1082 or ap_const_lv9_9);
    tmp_21_fu_848_p3 <= (ap_const_lv55_0 & tmp_20_fu_843_p2);
    tmp_22_fu_867_p2 <= (tmp_reg_1082 or ap_const_lv9_A);
    tmp_23_fu_872_p3 <= (ap_const_lv55_0 & tmp_22_fu_867_p2);
    tmp_24_fu_889_p2 <= (tmp_reg_1082 or ap_const_lv9_B);
    tmp_25_fu_894_p3 <= (ap_const_lv55_0 & tmp_24_fu_889_p2);
    tmp_26_fu_913_p2 <= (tmp_reg_1082 or ap_const_lv9_C);
    tmp_27_fu_918_p3 <= (ap_const_lv55_0 & tmp_26_fu_913_p2);
    tmp_28_fu_935_p2 <= (tmp_reg_1082 or ap_const_lv9_D);
    tmp_29_fu_940_p3 <= (ap_const_lv55_0 & tmp_28_fu_935_p2);
    tmp_2_cast4_cast_fu_711_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1060),7));
    tmp_2_cast4_fu_807_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1060),8));
    tmp_2_cast5_fu_999_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1060),9));
    tmp_2_cast6_fu_996_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1060),10));
    tmp_2_cast_fu_661_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_1060),6));
    tmp_2_fu_642_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_613_p3),64));
    tmp_30_fu_957_p2 <= (tmp_reg_1082 or ap_const_lv9_E);
    tmp_31_fu_962_p3 <= (ap_const_lv55_0 & tmp_30_fu_957_p2);
    tmp_32_fu_982_p2 <= (tmp_reg_1082 or ap_const_lv9_F);
    tmp_33_fu_987_p3 <= (ap_const_lv55_0 & tmp_32_fu_982_p2);
    tmp_34_fu_664_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_661_p1) + unsigned(ap_const_lv6_10));
    tmp_35_cast_fu_670_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_664_p2),64));
    tmp_35_fu_689_p3 <= (ap_const_lv59_1 & j_mid2_reg_1060);
    tmp_36_fu_714_p2 <= std_logic_vector(unsigned(tmp_2_cast4_cast_fu_711_p1) + unsigned(ap_const_lv7_30));
    tmp_37_cast_fu_720_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_714_p2),64));
    tmp_37_fu_739_p3 <= (ap_const_lv59_2 & j_mid2_reg_1060);
    tmp_38_fu_761_p2 <= std_logic_vector(unsigned(tmp_2_cast4_cast_reg_1137) + unsigned(ap_const_lv7_50));
    tmp_39_cast_fu_766_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_761_p2),64));
    tmp_39_fu_785_p3 <= (ap_const_lv59_3 & j_mid2_reg_1060);
    tmp_3_cast_fu_979_p1 <= std_logic_vector(resize(unsigned(tmp_reg_1082),10));
    tmp_3_fu_637_p1 <= std_logic_vector(resize(unsigned(tmp_fu_629_p3),64));
    tmp_40_fu_810_p2 <= std_logic_vector(unsigned(tmp_2_cast4_fu_807_p1) + unsigned(ap_const_lv8_70));
    tmp_41_cast_fu_816_p1 <= std_logic_vector(resize(unsigned(tmp_40_fu_810_p2),64));
    tmp_41_fu_835_p3 <= (ap_const_lv59_4 & j_mid2_reg_1060);
    tmp_42_fu_857_p2 <= std_logic_vector(unsigned(tmp_2_cast4_reg_1187) + unsigned(ap_const_lv8_90));
    tmp_43_cast_fu_862_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_857_p2),64));
    tmp_43_fu_881_p3 <= (ap_const_lv59_5 & j_mid2_reg_1060);
    tmp_44_fu_903_p2 <= std_logic_vector(unsigned(tmp_2_cast4_reg_1187) + unsigned(ap_const_lv8_B0));
    tmp_45_cast_fu_908_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_903_p2),64));
    tmp_45_fu_927_p3 <= (ap_const_lv59_6 & j_mid2_reg_1060);
    tmp_46_fu_971_p3 <= (ap_const_lv59_7 & j_mid2_reg_1060);
        tmp_47_cast7_fu_949_p1 <= std_logic_vector(resize(signed(tmp_38_reg_1162),8));

    tmp_47_cast_fu_952_p1 <= std_logic_vector(resize(unsigned(tmp_47_cast7_fu_949_p1),64));
    tmp_47_fu_1002_p2 <= std_logic_vector(unsigned(tmp_2_cast5_fu_999_p1) + unsigned(ap_const_lv9_F0));
    tmp_48_fu_1013_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_979_p1) + unsigned(tmp_2_cast6_fu_996_p1));
    tmp_49_cast_fu_1008_p1 <= std_logic_vector(resize(unsigned(tmp_47_fu_1002_p2),64));
    tmp_4_fu_647_p2 <= (tmp_reg_1082 or ap_const_lv9_1);
    tmp_50_cast_fu_1047_p1 <= std_logic_vector(resize(unsigned(tmp_48_reg_1298),64));
    tmp_5_fu_652_p3 <= (ap_const_lv55_0 & tmp_4_fu_647_p2);
    tmp_7_fu_675_p2 <= (tmp_reg_1082 or ap_const_lv9_2);
    tmp_8_fu_680_p3 <= (ap_const_lv55_0 & tmp_7_fu_675_p2);
    tmp_9_fu_697_p2 <= (tmp_reg_1082 or ap_const_lv9_3);
    tmp_fu_629_p3 <= (tmp_mid2_v_fu_621_p3 & ap_const_lv4_0);
    tmp_mid2_v_fu_621_p3 <= 
        i_1_fu_601_p2 when (exitcond_fu_607_p2(0) = '1') else 
        i_phi_fu_421_p4;
    tmp_s_fu_702_p3 <= (ap_const_lv55_0 & tmp_9_fu_697_p2);
end behav;
