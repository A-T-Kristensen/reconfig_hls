-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    a_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_EN_A : OUT STD_LOGIC;
    a_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3_Clk_A : OUT STD_LOGIC;
    a_3_Rst_A : OUT STD_LOGIC;
    b_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_EN_A : OUT STD_LOGIC;
    b_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0_Clk_A : OUT STD_LOGIC;
    b_0_Rst_A : OUT STD_LOGIC;
    b_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_EN_A : OUT STD_LOGIC;
    b_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_Clk_A : OUT STD_LOGIC;
    b_1_Rst_A : OUT STD_LOGIC;
    b_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_EN_A : OUT STD_LOGIC;
    b_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_2_Clk_A : OUT STD_LOGIC;
    b_2_Rst_A : OUT STD_LOGIC;
    b_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_EN_A : OUT STD_LOGIC;
    b_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_3_Clk_A : OUT STD_LOGIC;
    b_3_Rst_A : OUT STD_LOGIC;
    c_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_EN_A : OUT STD_LOGIC;
    c_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    c_Clk_A : OUT STD_LOGIC;
    c_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.150000,HLS_SYN_LAT=1034,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1595,HLS_SYN_LUT=944}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_404 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_415 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_426 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal exitcond_flatten_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_570_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_reg_823 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_588_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_828 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp0_iter1_j_mid2_reg_828 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp0_iter2_j_mid2_reg_828 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_fu_596_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_reg_837 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_837 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_837 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_604_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_843 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_0_load_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_load_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_load_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_load_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_load_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_load_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_load_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_load_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_load_1_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_load_1_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_load_1_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_load_1_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_load_1_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_load_1_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_load_1_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_load_1_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_load_2_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_load_2_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_load_2_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_load_2_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_load_2_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_load_2_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_load_2_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_load_2_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_724_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_1130 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_0_load_3_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_load_3_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_load_3_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_load_3_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_load_3_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_load_3_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_load_3_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_load_3_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_4_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_11_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_5_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_12_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_6_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_13_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_7_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_14_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_s_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_s_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal indvar_flatten_phi_fu_408_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_phi_fu_419_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_phi_fu_430_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_633_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_667_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_679_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_695_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_628_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast_fu_645_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_648_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_662_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_690_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast3_fu_707_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_710_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_751_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_794_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_cast4_fu_805_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_cast_fu_801_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_808_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component matmul_hw_mul_32sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmul_hw_mul_32sdEe_U1 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_437_p0,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    matmul_hw_mul_32sdEe_U2 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_438_p0,
        din1 => grp_fu_438_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_438_p2);

    matmul_hw_mul_32sdEe_U3 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_439_p0,
        din1 => grp_fu_439_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p2);

    matmul_hw_mul_32sdEe_U4 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_440_p0,
        din1 => grp_fu_440_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_564_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and not((exitcond_flatten_reg_819 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
                i_reg_415 <= tmp_mid2_v_reg_837;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_415 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
                indvar_flatten_reg_404 <= indvar_flatten_next_reg_823;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_404 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
                j_reg_426 <= j_1_reg_1130;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_426 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then
                a_0_load_1_reg_1010 <= a_0_Dout_A;
                a_1_load_1_reg_1020 <= a_1_Dout_A;
                a_2_load_1_reg_1030 <= a_2_Dout_A;
                a_3_load_1_reg_1040 <= a_3_Dout_A;
                b_0_load_1_reg_1015 <= b_0_Dout_A;
                b_1_load_1_reg_1025 <= b_1_Dout_A;
                b_2_load_1_reg_1035 <= b_2_Dout_A;
                b_3_load_1_reg_1045 <= b_3_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then
                a_0_load_2_reg_1090 <= a_0_Dout_A;
                a_1_load_2_reg_1100 <= a_1_Dout_A;
                a_2_load_2_reg_1110 <= a_2_Dout_A;
                a_3_load_2_reg_1120 <= a_3_Dout_A;
                b_0_load_2_reg_1095 <= b_0_Dout_A;
                b_1_load_2_reg_1105 <= b_1_Dout_A;
                b_2_load_2_reg_1115 <= b_2_Dout_A;
                b_3_load_2_reg_1125 <= b_3_Dout_A;
                j_1_reg_1130 <= j_1_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then
                a_0_load_3_reg_1135 <= a_0_Dout_A;
                a_1_load_3_reg_1145 <= a_1_Dout_A;
                a_2_load_3_reg_1155 <= a_2_Dout_A;
                a_3_load_3_reg_1165 <= a_3_Dout_A;
                b_0_load_3_reg_1140 <= b_0_Dout_A;
                b_1_load_3_reg_1150 <= b_1_Dout_A;
                b_2_load_3_reg_1160 <= b_2_Dout_A;
                b_3_load_3_reg_1170 <= b_3_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then
                a_0_load_reg_930 <= a_0_Dout_A;
                a_1_load_reg_940 <= a_1_Dout_A;
                a_2_load_reg_950 <= a_2_Dout_A;
                a_3_load_reg_960 <= a_3_Dout_A;
                b_0_load_reg_935 <= b_0_Dout_A;
                b_1_load_reg_945 <= b_1_Dout_A;
                b_2_load_reg_955 <= b_2_Dout_A;
                b_3_load_reg_965 <= b_3_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 <= exitcond_flatten_reg_819;
                ap_pipeline_reg_pp0_iter1_j_mid2_reg_828 <= j_mid2_reg_828;
                ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_837 <= tmp_mid2_v_reg_837;
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819;
                ap_pipeline_reg_pp0_iter2_j_mid2_reg_828 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_828;
                ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_837 <= ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_837;
                exitcond_flatten_reg_819 <= exitcond_flatten_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_823 <= indvar_flatten_next_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_564_p2))) then
                j_mid2_reg_828 <= j_mid2_fu_588_p3;
                    tmp_reg_843(6 downto 2) <= tmp_fu_604_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819)))) then
                reg_550 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_554 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819))) then
                tmp10_reg_1220 <= grp_fu_558_p2;
                tmp_6_13_reg_1215 <= grp_fu_439_p2;
                tmp_6_2_reg_1205 <= grp_fu_438_p2;
                tmp_6_6_reg_1210 <= grp_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819))) then
                tmp_1_s_reg_1240 <= tmp_1_s_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 = ap_const_lv1_0))) then
                tmp_6_11_reg_1185 <= grp_fu_439_p2;
                tmp_6_4_reg_1180 <= grp_fu_440_p2;
                tmp_6_reg_1175 <= grp_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_819 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_12_reg_1200 <= grp_fu_439_p2;
                tmp_6_1_reg_1190 <= grp_fu_438_p2;
                tmp_6_5_reg_1195 <= grp_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_6_14_reg_1235 <= grp_fu_439_p2;
                tmp_6_3_reg_1225 <= grp_fu_438_p2;
                tmp_6_7_reg_1230 <= grp_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_564_p2))) then
                tmp_mid2_v_reg_837 <= tmp_mid2_v_fu_596_p3;
            end if;
        end if;
    end process;
    tmp_reg_843(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, exitcond_flatten_fu_564_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_564_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_564_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_3_fu_612_p1, tmp_5_fu_633_p3, tmp_8_fu_667_p3, tmp_s_fu_695_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_0_Addr_A_orig <= tmp_s_fu_695_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_0_Addr_A_orig <= tmp_8_fu_667_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_0_Addr_A_orig <= tmp_5_fu_633_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_0_Addr_A_orig <= tmp_3_fu_612_p1(32 - 1 downto 0);
            else 
                a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_3_fu_612_p1, tmp_5_fu_633_p3, tmp_8_fu_667_p3, tmp_s_fu_695_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_1_Addr_A_orig <= tmp_s_fu_695_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_1_Addr_A_orig <= tmp_8_fu_667_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_1_Addr_A_orig <= tmp_5_fu_633_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_1_Addr_A_orig <= tmp_3_fu_612_p1(32 - 1 downto 0);
            else 
                a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv32_0;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv4_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_3_fu_612_p1, tmp_5_fu_633_p3, tmp_8_fu_667_p3, tmp_s_fu_695_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_2_Addr_A_orig <= tmp_s_fu_695_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_2_Addr_A_orig <= tmp_8_fu_667_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_2_Addr_A_orig <= tmp_5_fu_633_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_2_Addr_A_orig <= tmp_3_fu_612_p1(32 - 1 downto 0);
            else 
                a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv32_0;

    a_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            a_2_EN_A <= ap_const_logic_1;
        else 
            a_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv4_0;
    a_3_Addr_A <= std_logic_vector(shift_left(unsigned(a_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    a_3_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_3_fu_612_p1, tmp_5_fu_633_p3, tmp_8_fu_667_p3, tmp_s_fu_695_p3)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                a_3_Addr_A_orig <= tmp_s_fu_695_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                a_3_Addr_A_orig <= tmp_8_fu_667_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                a_3_Addr_A_orig <= tmp_5_fu_633_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                a_3_Addr_A_orig <= tmp_3_fu_612_p1(32 - 1 downto 0);
            else 
                a_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    a_3_Clk_A <= ap_clk;
    a_3_Din_A <= ap_const_lv32_0;

    a_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            a_3_EN_A <= ap_const_logic_1;
        else 
            a_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_3_Rst_A <= ap_rst;
    a_3_WEN_A <= ap_const_lv4_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state15 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Addr_A <= std_logic_vector(shift_left(unsigned(b_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_2_fu_620_p1, tmp_13_cast_fu_654_p1, tmp_12_fu_679_p3, tmp_15_cast_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_0_Addr_A_orig <= tmp_15_cast_fu_716_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_0_Addr_A_orig <= tmp_12_fu_679_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_0_Addr_A_orig <= tmp_13_cast_fu_654_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_0_Addr_A_orig <= tmp_2_fu_620_p1(32 - 1 downto 0);
            else 
                b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_0_Clk_A <= ap_clk;
    b_0_Din_A <= ap_const_lv32_0;

    b_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            b_0_EN_A <= ap_const_logic_1;
        else 
            b_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Rst_A <= ap_rst;
    b_0_WEN_A <= ap_const_lv4_0;
    b_1_Addr_A <= std_logic_vector(shift_left(unsigned(b_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_2_fu_620_p1, tmp_13_cast_fu_654_p1, tmp_12_fu_679_p3, tmp_15_cast_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_1_Addr_A_orig <= tmp_15_cast_fu_716_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_1_Addr_A_orig <= tmp_12_fu_679_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_1_Addr_A_orig <= tmp_13_cast_fu_654_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_1_Addr_A_orig <= tmp_2_fu_620_p1(32 - 1 downto 0);
            else 
                b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_1_Clk_A <= ap_clk;
    b_1_Din_A <= ap_const_lv32_0;

    b_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            b_1_EN_A <= ap_const_logic_1;
        else 
            b_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_1_Rst_A <= ap_rst;
    b_1_WEN_A <= ap_const_lv4_0;
    b_2_Addr_A <= std_logic_vector(shift_left(unsigned(b_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_2_fu_620_p1, tmp_13_cast_fu_654_p1, tmp_12_fu_679_p3, tmp_15_cast_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_2_Addr_A_orig <= tmp_15_cast_fu_716_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_2_Addr_A_orig <= tmp_12_fu_679_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_2_Addr_A_orig <= tmp_13_cast_fu_654_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_2_Addr_A_orig <= tmp_2_fu_620_p1(32 - 1 downto 0);
            else 
                b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_2_Clk_A <= ap_clk;
    b_2_Din_A <= ap_const_lv32_0;

    b_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            b_2_EN_A <= ap_const_logic_1;
        else 
            b_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_2_Rst_A <= ap_rst;
    b_2_WEN_A <= ap_const_lv4_0;
    b_3_Addr_A <= std_logic_vector(shift_left(unsigned(b_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    b_3_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, tmp_2_fu_620_p1, tmp_13_cast_fu_654_p1, tmp_12_fu_679_p3, tmp_15_cast_fu_716_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                b_3_Addr_A_orig <= tmp_15_cast_fu_716_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                b_3_Addr_A_orig <= tmp_12_fu_679_p3(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                b_3_Addr_A_orig <= tmp_13_cast_fu_654_p1(32 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                b_3_Addr_A_orig <= tmp_2_fu_620_p1(32 - 1 downto 0);
            else 
                b_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            b_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b_3_Clk_A <= ap_clk;
    b_3_Din_A <= ap_const_lv32_0;

    b_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            b_3_EN_A <= ap_const_logic_1;
        else 
            b_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_3_Rst_A <= ap_rst;
    b_3_WEN_A <= ap_const_lv4_0;
    c_Addr_A <= std_logic_vector(shift_left(unsigned(c_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    c_Addr_A_orig <= tmp_16_cast_fu_814_p1(32 - 1 downto 0);
    c_Clk_A <= ap_clk;
    c_Din_A <= tmp_1_s_reg_1240;

    c_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            c_EN_A <= ap_const_logic_1;
        else 
            c_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    c_Rst_A <= ap_rst;

    c_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_819) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) then 
            c_WEN_A <= ap_const_lv4_F;
        else 
            c_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond_flatten_fu_564_p2 <= "1" when (indvar_flatten_phi_fu_408_p4 = ap_const_lv9_100) else "0";
    exitcond_fu_582_p2 <= "1" when (j_phi_fu_430_p4 = ap_const_lv5_10) else "0";

    grp_fu_437_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, a_2_load_reg_950, a_2_load_1_reg_1030, a_2_load_2_reg_1110, a_2_load_3_reg_1155)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_437_p0 <= a_2_load_3_reg_1155;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_437_p0 <= a_2_load_2_reg_1110;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_437_p0 <= a_2_load_1_reg_1030;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_437_p0 <= a_2_load_reg_950;
        else 
            grp_fu_437_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, b_2_load_reg_955, b_2_load_1_reg_1035, b_2_load_2_reg_1115, b_2_load_3_reg_1160)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_437_p1 <= b_2_load_3_reg_1160;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_437_p1 <= b_2_load_2_reg_1115;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_437_p1 <= b_2_load_1_reg_1035;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_437_p1 <= b_2_load_reg_955;
        else 
            grp_fu_437_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_438_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, a_0_load_reg_930, a_0_load_1_reg_1010, a_0_load_2_reg_1090, a_0_load_3_reg_1135)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_438_p0 <= a_0_load_3_reg_1135;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_438_p0 <= a_0_load_2_reg_1090;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_438_p0 <= a_0_load_1_reg_1010;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_438_p0 <= a_0_load_reg_930;
        else 
            grp_fu_438_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_438_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, b_0_load_reg_935, b_0_load_1_reg_1015, b_0_load_2_reg_1095, b_0_load_3_reg_1140)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_438_p1 <= b_0_load_3_reg_1140;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_438_p1 <= b_0_load_2_reg_1095;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_438_p1 <= b_0_load_1_reg_1015;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_438_p1 <= b_0_load_reg_935;
        else 
            grp_fu_438_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_439_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, a_3_load_reg_960, a_3_load_1_reg_1040, a_3_load_2_reg_1120, a_3_load_3_reg_1165)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_439_p0 <= a_3_load_3_reg_1165;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_439_p0 <= a_3_load_2_reg_1120;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_439_p0 <= a_3_load_1_reg_1040;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_439_p0 <= a_3_load_reg_960;
        else 
            grp_fu_439_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_439_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, b_3_load_reg_965, b_3_load_1_reg_1045, b_3_load_2_reg_1125, b_3_load_3_reg_1170)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_439_p1 <= b_3_load_3_reg_1170;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_439_p1 <= b_3_load_2_reg_1125;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_439_p1 <= b_3_load_1_reg_1045;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_439_p1 <= b_3_load_reg_965;
        else 
            grp_fu_439_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_440_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, a_1_load_reg_940, a_1_load_1_reg_1020, a_1_load_2_reg_1100, a_1_load_3_reg_1145)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_440_p0 <= a_1_load_3_reg_1145;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_440_p0 <= a_1_load_2_reg_1100;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_440_p0 <= a_1_load_1_reg_1020;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_440_p0 <= a_1_load_reg_940;
        else 
            grp_fu_440_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_440_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, b_1_load_reg_945, b_1_load_1_reg_1025, b_1_load_2_reg_1105, b_1_load_3_reg_1150)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_440_p1 <= b_1_load_3_reg_1150;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_440_p1 <= b_1_load_2_reg_1105;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_440_p1 <= b_1_load_1_reg_1025;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_440_p1 <= b_1_load_reg_945;
        else 
            grp_fu_440_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_558_p2 <= std_logic_vector(unsigned(reg_550) + unsigned(reg_554));
    i_1_fu_576_p2 <= std_logic_vector(unsigned(i_phi_fu_419_p4) + unsigned(ap_const_lv5_1));

    i_phi_fu_419_p4_assign_proc : process(i_reg_415, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_819, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_837)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
            i_phi_fu_419_p4 <= tmp_mid2_v_reg_837;
        else 
            i_phi_fu_419_p4 <= i_reg_415;
        end if; 
    end process;

    indvar_flatten_next_fu_570_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_408_p4) + unsigned(ap_const_lv9_1));

    indvar_flatten_phi_fu_408_p4_assign_proc : process(indvar_flatten_reg_404, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_819, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_823)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_408_p4 <= indvar_flatten_next_reg_823;
        else 
            indvar_flatten_phi_fu_408_p4 <= indvar_flatten_reg_404;
        end if; 
    end process;

    j_1_fu_724_p2 <= std_logic_vector(unsigned(j_mid2_reg_828) + unsigned(ap_const_lv5_1));
    j_mid2_fu_588_p3 <= 
        ap_const_lv5_0 when (exitcond_fu_582_p2(0) = '1') else 
        j_phi_fu_430_p4;

    j_phi_fu_430_p4_assign_proc : process(j_reg_426, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_819, ap_CS_fsm_pp0_stage0, j_1_reg_1130)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_819 = ap_const_lv1_0))) then 
            j_phi_fu_430_p4 <= j_1_reg_1130;
        else 
            j_phi_fu_430_p4 <= j_reg_426;
        end if; 
    end process;

    tmp12_fu_776_p2 <= std_logic_vector(unsigned(tmp14_fu_772_p2) + unsigned(tmp13_fu_768_p2));
    tmp13_fu_768_p2 <= std_logic_vector(unsigned(tmp_6_11_reg_1185) + unsigned(tmp_6_12_reg_1200));
    tmp14_fu_772_p2 <= std_logic_vector(unsigned(tmp_6_13_reg_1215) + unsigned(tmp_6_14_reg_1235));
    tmp1_fu_757_p2 <= std_logic_vector(unsigned(tmp5_fu_751_p2) + unsigned(tmp2_fu_737_p2));
    tmp2_fu_737_p2 <= std_logic_vector(unsigned(tmp4_fu_733_p2) + unsigned(tmp3_fu_729_p2));
    tmp3_fu_729_p2 <= std_logic_vector(unsigned(tmp_6_reg_1175) + unsigned(tmp_6_1_reg_1190));
    tmp4_fu_733_p2 <= std_logic_vector(unsigned(tmp_6_2_reg_1205) + unsigned(tmp_6_3_reg_1225));
    tmp5_fu_751_p2 <= std_logic_vector(unsigned(tmp7_fu_747_p2) + unsigned(tmp6_fu_743_p2));
    tmp6_fu_743_p2 <= std_logic_vector(unsigned(tmp_6_4_reg_1180) + unsigned(tmp_6_5_reg_1195));
    tmp7_fu_747_p2 <= std_logic_vector(unsigned(tmp_6_6_reg_1210) + unsigned(tmp_6_7_reg_1230));
    tmp8_fu_782_p2 <= std_logic_vector(unsigned(tmp12_fu_776_p2) + unsigned(tmp9_fu_763_p2));
    tmp9_fu_763_p2 <= std_logic_vector(unsigned(grp_fu_558_p2) + unsigned(tmp10_reg_1220));
    tmp_10_fu_794_p3 <= (ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_837 & ap_const_lv4_0);
    tmp_11_fu_648_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_645_p1) + unsigned(ap_const_lv6_10));
    tmp_12_cast_fu_801_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_794_p3),10));
    tmp_12_fu_679_p3 <= (ap_const_lv59_1 & j_mid2_reg_828);
    tmp_13_cast_fu_654_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_648_p2),64));
    tmp_13_fu_710_p2 <= std_logic_vector(unsigned(tmp_2_cast3_fu_707_p1) + unsigned(ap_const_lv7_30));
    tmp_14_fu_808_p2 <= std_logic_vector(unsigned(tmp_2_cast4_fu_805_p1) + unsigned(tmp_12_cast_fu_801_p1));
    tmp_15_cast_fu_716_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_710_p2),64));
    tmp_16_cast_fu_814_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_808_p2),64));
    tmp_1_s_fu_788_p2 <= std_logic_vector(unsigned(tmp8_fu_782_p2) + unsigned(tmp1_fu_757_p2));
    tmp_2_cast3_fu_707_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_828),7));
    tmp_2_cast4_fu_805_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter2_j_mid2_reg_828),10));
    tmp_2_cast_fu_645_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_828),6));
    tmp_2_fu_620_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_588_p3),64));
    tmp_3_fu_612_p1 <= std_logic_vector(resize(unsigned(tmp_fu_604_p3),64));
    tmp_4_fu_628_p2 <= (tmp_reg_843 or ap_const_lv7_1);
    tmp_5_fu_633_p3 <= (ap_const_lv57_0 & tmp_4_fu_628_p2);
    tmp_7_fu_662_p2 <= (tmp_reg_843 or ap_const_lv7_2);
    tmp_8_fu_667_p3 <= (ap_const_lv57_0 & tmp_7_fu_662_p2);
    tmp_9_fu_690_p2 <= (tmp_reg_843 or ap_const_lv7_3);
    tmp_fu_604_p3 <= (tmp_mid2_v_fu_596_p3 & ap_const_lv2_0);
    tmp_mid2_v_fu_596_p3 <= 
        i_1_fu_576_p2 when (exitcond_fu_582_p2(0) = '1') else 
        i_phi_fu_419_p4;
    tmp_s_fu_695_p3 <= (ap_const_lv57_0 & tmp_9_fu_690_p2);
end behav;
