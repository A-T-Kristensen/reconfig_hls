-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_hw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_EN_A : OUT STD_LOGIC;
    a_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_0_Clk_A : OUT STD_LOGIC;
    a_0_Rst_A : OUT STD_LOGIC;
    a_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_EN_A : OUT STD_LOGIC;
    a_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_Clk_A : OUT STD_LOGIC;
    a_1_Rst_A : OUT STD_LOGIC;
    a_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_EN_A : OUT STD_LOGIC;
    a_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2_Clk_A : OUT STD_LOGIC;
    a_2_Rst_A : OUT STD_LOGIC;
    a_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_EN_A : OUT STD_LOGIC;
    a_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3_Clk_A : OUT STD_LOGIC;
    a_3_Rst_A : OUT STD_LOGIC;
    b_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_EN_A : OUT STD_LOGIC;
    b_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0_Clk_A : OUT STD_LOGIC;
    b_0_Rst_A : OUT STD_LOGIC;
    b_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_EN_A : OUT STD_LOGIC;
    b_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_Clk_A : OUT STD_LOGIC;
    b_1_Rst_A : OUT STD_LOGIC;
    b_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_EN_A : OUT STD_LOGIC;
    b_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_2_Clk_A : OUT STD_LOGIC;
    b_2_Rst_A : OUT STD_LOGIC;
    b_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_EN_A : OUT STD_LOGIC;
    b_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    b_3_Clk_A : OUT STD_LOGIC;
    b_3_Rst_A : OUT STD_LOGIC;
    c_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_EN_A : OUT STD_LOGIC;
    c_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    c_Clk_A : OUT STD_LOGIC;
    c_Rst_A : OUT STD_LOGIC );
end;


architecture behav of matmul_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_hw,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.700000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=414,HLS_SYN_LUT=119}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_201 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_212 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_306_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_324_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter3_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter4_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter5_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter6_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter7_j_mid2_reg_411 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_fu_332_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_fu_356_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_0_load_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_load_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_load_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_load_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_load_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_load_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_load_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_load_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_3_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal i_phi_fu_205_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal b_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal c_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_362_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_373_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_369_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_376_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component matmul_hw_mul_32sdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmul_hw_mul_32sdEe_U1 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_2_load_reg_487,
        din1 => b_2_load_reg_492,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    matmul_hw_mul_32sdEe_U2 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_0_load_reg_467,
        din1 => b_0_load_reg_472,
        ce => ap_const_logic_1,
        dout => grp_fu_224_p2);

    matmul_hw_mul_32sdEe_U3 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_3_load_reg_497,
        din1 => b_3_load_reg_502,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    matmul_hw_mul_32sdEe_U4 : component matmul_hw_mul_32sdEe
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_1_load_reg_477,
        din1 => b_1_load_reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_300_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_300_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_300_p2 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
            end if;
        end if;
    end process;


    i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_201 <= tmp_mid2_v_reg_416;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_201 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_300_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_190 <= indvar_flatten_next_fu_306_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_190 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_300_p2 = ap_const_lv1_0))) then 
                j_reg_212 <= j_1_fu_356_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_212 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_402 = ap_const_lv1_0))) then
                a_0_load_reg_467 <= a_0_Dout_A;
                a_1_load_reg_477 <= a_1_Dout_A;
                a_2_load_reg_487 <= a_2_Dout_A;
                a_3_load_reg_497 <= a_3_Dout_A;
                b_0_load_reg_472 <= b_0_Dout_A;
                b_1_load_reg_482 <= b_1_Dout_A;
                b_2_load_reg_492 <= b_2_Dout_A;
                b_3_load_reg_502 <= b_3_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_402 <= exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter1_j_mid2_reg_411 <= j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_416 <= tmp_mid2_v_reg_416;
                exitcond_flatten_reg_402 <= exitcond_flatten_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter2_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter1_j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter1_tmp_mid2_v_reg_416;
                ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter3_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter2_j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter2_tmp_mid2_v_reg_416;
                ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter4_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter3_j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter3_tmp_mid2_v_reg_416;
                ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter5_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter4_j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter4_tmp_mid2_v_reg_416;
                ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter5_exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter6_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter5_j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter5_tmp_mid2_v_reg_416;
                ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402 <= ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402;
                ap_pipeline_reg_pp0_iter7_j_mid2_reg_411 <= ap_pipeline_reg_pp0_iter6_j_mid2_reg_411;
                ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_416 <= ap_pipeline_reg_pp0_iter6_tmp_mid2_v_reg_416;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_300_p2 = ap_const_lv1_0))) then
                j_mid2_reg_411 <= j_mid2_fu_324_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_pipeline_reg_pp0_iter6_exitcond_flatten_reg_402 = ap_const_lv1_0)) then
                tmp_6_1_reg_512 <= grp_fu_226_p2;
                tmp_6_2_reg_517 <= grp_fu_223_p2;
                tmp_6_3_reg_522 <= grp_fu_225_p2;
                tmp_6_reg_507 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_300_p2 = ap_const_lv1_0))) then
                tmp_mid2_v_reg_416 <= tmp_mid2_v_fu_332_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_300_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter7)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_300_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_300_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_0_Addr_A <= std_logic_vector(shift_left(unsigned(a_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_0_Addr_A_orig <= tmp_mid2_fu_340_p1(32 - 1 downto 0);
    a_0_Clk_A <= ap_clk;
    a_0_Din_A <= ap_const_lv32_0;

    a_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_0_EN_A <= ap_const_logic_1;
        else 
            a_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_0_Rst_A <= ap_rst;
    a_0_WEN_A <= ap_const_lv4_0;
    a_1_Addr_A <= std_logic_vector(shift_left(unsigned(a_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_1_Addr_A_orig <= tmp_mid2_fu_340_p1(32 - 1 downto 0);
    a_1_Clk_A <= ap_clk;
    a_1_Din_A <= ap_const_lv32_0;

    a_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_1_EN_A <= ap_const_logic_1;
        else 
            a_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_1_Rst_A <= ap_rst;
    a_1_WEN_A <= ap_const_lv4_0;
    a_2_Addr_A <= std_logic_vector(shift_left(unsigned(a_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_2_Addr_A_orig <= tmp_mid2_fu_340_p1(32 - 1 downto 0);
    a_2_Clk_A <= ap_clk;
    a_2_Din_A <= ap_const_lv32_0;

    a_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_2_EN_A <= ap_const_logic_1;
        else 
            a_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_2_Rst_A <= ap_rst;
    a_2_WEN_A <= ap_const_lv4_0;
    a_3_Addr_A <= std_logic_vector(shift_left(unsigned(a_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    a_3_Addr_A_orig <= tmp_mid2_fu_340_p1(32 - 1 downto 0);
    a_3_Clk_A <= ap_clk;
    a_3_Din_A <= ap_const_lv32_0;

    a_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            a_3_EN_A <= ap_const_logic_1;
        else 
            a_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    a_3_Rst_A <= ap_rst;
    a_3_WEN_A <= ap_const_lv4_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Addr_A <= std_logic_vector(shift_left(unsigned(b_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    b_0_Addr_A_orig <= tmp_2_fu_348_p1(32 - 1 downto 0);
    b_0_Clk_A <= ap_clk;
    b_0_Din_A <= ap_const_lv32_0;

    b_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            b_0_EN_A <= ap_const_logic_1;
        else 
            b_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_0_Rst_A <= ap_rst;
    b_0_WEN_A <= ap_const_lv4_0;
    b_1_Addr_A <= std_logic_vector(shift_left(unsigned(b_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    b_1_Addr_A_orig <= tmp_2_fu_348_p1(32 - 1 downto 0);
    b_1_Clk_A <= ap_clk;
    b_1_Din_A <= ap_const_lv32_0;

    b_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            b_1_EN_A <= ap_const_logic_1;
        else 
            b_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_1_Rst_A <= ap_rst;
    b_1_WEN_A <= ap_const_lv4_0;
    b_2_Addr_A <= std_logic_vector(shift_left(unsigned(b_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    b_2_Addr_A_orig <= tmp_2_fu_348_p1(32 - 1 downto 0);
    b_2_Clk_A <= ap_clk;
    b_2_Din_A <= ap_const_lv32_0;

    b_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            b_2_EN_A <= ap_const_logic_1;
        else 
            b_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_2_Rst_A <= ap_rst;
    b_2_WEN_A <= ap_const_lv4_0;
    b_3_Addr_A <= std_logic_vector(shift_left(unsigned(b_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    b_3_Addr_A_orig <= tmp_2_fu_348_p1(32 - 1 downto 0);
    b_3_Clk_A <= ap_clk;
    b_3_Din_A <= ap_const_lv32_0;

    b_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            b_3_EN_A <= ap_const_logic_1;
        else 
            b_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    b_3_Rst_A <= ap_rst;
    b_3_WEN_A <= ap_const_lv4_0;
    c_Addr_A <= std_logic_vector(shift_left(unsigned(c_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    c_Addr_A_orig <= tmp_4_cast_fu_382_p1(32 - 1 downto 0);
    c_Clk_A <= ap_clk;
    c_Din_A <= std_logic_vector(unsigned(tmp2_fu_391_p2) + unsigned(tmp1_fu_387_p2));

    c_EN_A_assign_proc : process(ap_enable_reg_pp0_iter8)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter8)) then 
            c_EN_A <= ap_const_logic_1;
        else 
            c_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    c_Rst_A <= ap_rst;

    c_WEN_A_assign_proc : process(ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402, ap_enable_reg_pp0_iter8)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_pipeline_reg_pp0_iter7_exitcond_flatten_reg_402 = ap_const_lv1_0)))) then 
            c_WEN_A <= ap_const_lv4_F;
        else 
            c_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond_flatten_fu_300_p2 <= "1" when (indvar_flatten_reg_190 = ap_const_lv5_10) else "0";
    exitcond_fu_318_p2 <= "1" when (j_reg_212 = ap_const_lv3_4) else "0";
    i_1_fu_312_p2 <= std_logic_vector(unsigned(i_phi_fu_205_p4) + unsigned(ap_const_lv3_1));

    i_phi_fu_205_p4_assign_proc : process(i_reg_201, exitcond_flatten_reg_402, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_416, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_402 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_phi_fu_205_p4 <= tmp_mid2_v_reg_416;
        else 
            i_phi_fu_205_p4 <= i_reg_201;
        end if; 
    end process;

    indvar_flatten_next_fu_306_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_190) + unsigned(ap_const_lv5_1));
    j_1_fu_356_p2 <= std_logic_vector(unsigned(j_mid2_fu_324_p3) + unsigned(ap_const_lv3_1));
    j_mid2_fu_324_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_318_p2(0) = '1') else 
        j_reg_212;
    tmp1_fu_387_p2 <= std_logic_vector(unsigned(tmp_6_reg_507) + unsigned(tmp_6_1_reg_512));
    tmp2_fu_391_p2 <= std_logic_vector(unsigned(tmp_6_2_reg_517) + unsigned(tmp_6_3_reg_522));
    tmp_2_cast_fu_373_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter7_j_mid2_reg_411),6));
    tmp_2_fu_348_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_324_p3),64));
    tmp_3_cast_fu_369_p1 <= std_logic_vector(resize(unsigned(tmp_fu_362_p3),6));
    tmp_4_cast_fu_382_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_376_p2),64));
    tmp_4_fu_376_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_373_p1) + unsigned(tmp_3_cast_fu_369_p1));
    tmp_fu_362_p3 <= (ap_pipeline_reg_pp0_iter7_tmp_mid2_v_reg_416 & ap_const_lv2_0);
    tmp_mid2_fu_340_p1 <= std_logic_vector(resize(unsigned(tmp_mid2_v_fu_332_p3),64));
    tmp_mid2_v_fu_332_p3 <= 
        i_1_fu_312_p2 when (exitcond_fu_318_p2(0) = '1') else 
        i_phi_fu_205_p4;
end behav;
