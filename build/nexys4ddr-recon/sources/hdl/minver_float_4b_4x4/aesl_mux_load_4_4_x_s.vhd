-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aesl_mux_load_4_4_x_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    empty_7_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_7_EN_A : OUT STD_LOGIC;
    empty_7_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    empty_7_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_7_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_8_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_8_EN_A : OUT STD_LOGIC;
    empty_8_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    empty_8_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_8_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_9_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_9_EN_A : OUT STD_LOGIC;
    empty_9_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    empty_9_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_9_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_10_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_10_EN_A : OUT STD_LOGIC;
    empty_10_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    empty_10_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_10_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_11 : IN STD_LOGIC_VECTOR (1 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aesl_mux_load_4_4_x_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_64_reg_145 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_fu_98_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_10_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_7_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_8_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_9_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_111_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_124_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_idle_pp0 : STD_LOGIC;
    signal ap_pipeline_start_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then
                tmp_64_reg_145 <= empty_11;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_ce, ap_pipeline_idle_pp0, ap_pipeline_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0 downto 0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_idle_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0))) then 
            ap_pipeline_idle_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_pipeline_start_pp0_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_start))) then 
            ap_pipeline_start_pp0 <= ap_const_logic_1;
        else 
            ap_pipeline_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        empty_9_Dout_A when (sel_tmp4_fu_132_p2(0) = '1') else 
        sel_tmp3_fu_124_p3;
    empty_10_Addr_A <= std_logic_vector(shift_left(unsigned(empty_10_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    empty_10_Addr_A_orig <= p_cast_fu_98_p1(32 - 1 downto 0);
    empty_10_Din_A <= ap_const_lv32_0;

    empty_10_EN_A_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            empty_10_EN_A <= ap_const_logic_1;
        else 
            empty_10_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_WEN_A <= ap_const_lv4_0;
    empty_7_Addr_A <= std_logic_vector(shift_left(unsigned(empty_7_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    empty_7_Addr_A_orig <= p_cast_fu_98_p1(32 - 1 downto 0);
    empty_7_Din_A <= ap_const_lv32_0;

    empty_7_EN_A_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            empty_7_EN_A <= ap_const_logic_1;
        else 
            empty_7_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    empty_7_WEN_A <= ap_const_lv4_0;
    empty_8_Addr_A <= std_logic_vector(shift_left(unsigned(empty_8_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    empty_8_Addr_A_orig <= p_cast_fu_98_p1(32 - 1 downto 0);
    empty_8_Din_A <= ap_const_lv32_0;

    empty_8_EN_A_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            empty_8_EN_A <= ap_const_logic_1;
        else 
            empty_8_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    empty_8_WEN_A <= ap_const_lv4_0;
    empty_9_Addr_A <= std_logic_vector(shift_left(unsigned(empty_9_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    empty_9_Addr_A_orig <= p_cast_fu_98_p1(32 - 1 downto 0);
    empty_9_Din_A <= ap_const_lv32_0;

    empty_9_EN_A_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_CS_fsm_pp0_stage0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            empty_9_EN_A <= ap_const_logic_1;
        else 
            empty_9_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    empty_9_WEN_A <= ap_const_lv4_0;
        p_cast_fu_98_p1 <= std_logic_vector(resize(signed(empty),64));

    sel_tmp1_fu_111_p3 <= 
        empty_7_Dout_A when (sel_tmp_fu_106_p2(0) = '1') else 
        empty_10_Dout_A;
    sel_tmp2_fu_119_p2 <= "1" when (tmp_64_reg_145 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_124_p3 <= 
        empty_8_Dout_A when (sel_tmp2_fu_119_p2(0) = '1') else 
        sel_tmp1_fu_111_p3;
    sel_tmp4_fu_132_p2 <= "1" when (tmp_64_reg_145 = ap_const_lv2_2) else "0";
    sel_tmp_fu_106_p2 <= "1" when (tmp_64_reg_145 = ap_const_lv2_0) else "0";
end behav;
